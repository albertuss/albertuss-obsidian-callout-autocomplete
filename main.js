/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CalloutAutocompletePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var CalloutSuggest = class extends import_obsidian.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.calloutItems = [];
    this.plugin = plugin;
  }
  loadCalloutItems() {
    const calloutManager = this.app.plugins.plugins["callout-manager"];
    console.log("Callout Manager:", calloutManager);
    console.log("Callout Manager full settings:", JSON.stringify(calloutManager == null ? void 0 : calloutManager.settings, null, 2));
    if (!calloutManager || !calloutManager.settings || !calloutManager.settings.callouts) {
      this.calloutItems = [
        { type: "note", icon: "lucide-sticky-note", color: "68, 138, 255" },
        { type: "info", icon: "lucide-info", color: "0, 176, 255" },
        { type: "warning", icon: "lucide-alert-triangle", color: "255, 171, 0" },
        { type: "error", icon: "lucide-x-circle", color: "255, 71, 87" },
        { type: "success", icon: "lucide-check-circle", color: "0, 135, 90" },
        { type: "tip", icon: "lucide-lightbulb", color: "0, 191, 165" },
        { type: "quote", icon: "lucide-quote", color: "158, 158, 158" },
        { type: "example", icon: "lucide-list", color: "124, 77, 255" },
        { type: "seealso", icon: "lucide-link", color: "0, 176, 255" },
        { type: "abstract", icon: "lucide-book-open", color: "0, 176, 255" },
        { type: "summary", icon: "lucide-book-open", color: "0, 176, 255" },
        { type: "important", icon: "lucide-flame", color: "0, 191, 165" },
        { type: "faq", icon: "lucide-help-circle", color: "0, 135, 90" },
        { type: "caution", icon: "lucide-alert-triangle", color: "255, 171, 0" },
        { type: "attention", icon: "lucide-alert-triangle", color: "255, 171, 0" },
        { type: "failure", icon: "lucide-x-circle", color: "255, 71, 87" }
      ];
      return;
    }
    const calloutSettings = calloutManager.settings.callouts;
    const customCallouts = calloutSettings.custom || [];
    const settings = calloutSettings.settings || {};
    const allCallouts = [];
    const defaultCallouts = [
      "note",
      "info",
      "warning",
      "error",
      "success",
      "tip",
      "quote",
      "example",
      "seealso",
      "abstract",
      "summary",
      "important",
      "faq",
      "caution",
      "attention",
      "failure"
    ];
    allCallouts.push(...defaultCallouts);
    if (customCallouts.length > 0) {
      allCallouts.push(...customCallouts);
    }
    this.calloutItems = allCallouts.map((type) => {
      const typeSettings = settings[type];
      let icon = this.getDefaultIcon(type);
      let color = this.getDefaultColor(type);
      if (typeSettings && typeSettings.length > 0) {
        const baseSettings = typeSettings.find((s) => !s.condition);
        if (baseSettings == null ? void 0 : baseSettings.changes) {
          icon = baseSettings.changes.icon || icon;
          color = baseSettings.changes.color || color;
        }
      }
      return { type, icon, color };
    });
    console.log("Final callout items:", this.calloutItems);
  }
  getDefaultIcon(type) {
    const iconMap = {
      note: "lucide-sticky-note",
      info: "lucide-info",
      warning: "lucide-alert-triangle",
      error: "lucide-x-circle",
      success: "lucide-check-circle",
      tip: "lucide-lightbulb",
      quote: "lucide-quote",
      example: "lucide-list",
      seealso: "lucide-link",
      abstract: "lucide-book-open",
      summary: "lucide-book-open",
      important: "lucide-flame",
      faq: "lucide-help-circle",
      caution: "lucide-alert-triangle",
      attention: "lucide-alert-triangle",
      failure: "lucide-x-circle",
      positive: "lucide-plus",
      negative: "lucide-minus",
      question: "lucide-help-circle",
      test: "lucide-triangle"
    };
    return iconMap[type] || "lucide-sticky-note";
  }
  getDefaultColor(type) {
    const colorMap = {
      note: "68, 138, 255",
      info: "0, 176, 255",
      warning: "255, 171, 0",
      error: "255, 71, 87",
      success: "0, 135, 90",
      tip: "0, 191, 165",
      quote: "158, 158, 158",
      example: "124, 77, 255",
      seealso: "0, 176, 255",
      abstract: "0, 176, 255",
      summary: "0, 176, 255",
      important: "0, 191, 165",
      faq: "0, 135, 90",
      caution: "255, 171, 0",
      attention: "255, 171, 0",
      failure: "255, 71, 87"
    };
    return colorMap[type] || "68, 138, 255";
  }
  onTrigger(cursor, editor, file) {
    const line = editor.getLine(cursor.line).trimStart();
    console.log("Current line:", line, "Cursor position:", cursor);
    if (line.startsWith("> [") && cursor.ch >= 3) {
      const startCh = line.indexOf("[") + 2;
      const triggerText = line.substring(startCh, cursor.ch).trim();
      console.log("Trigger activated, query:", triggerText);
      return {
        start: { line: cursor.line, ch: startCh },
        end: { line: cursor.line, ch: cursor.ch },
        query: triggerText
      };
    }
    console.log("Trigger condition not met");
    return null;
  }
  getSuggestions(context) {
    const query = context.query.toLowerCase();
    return this.calloutItems.filter((item) => item.type.toLowerCase().startsWith(query));
  }
  renderSuggestion(suggestion, el) {
    const wrapper = el.createDiv({ cls: "callout-suggestion-item" });
    const iconSpan = wrapper.createSpan({ cls: "callout-suggestion-icon" });
    (0, import_obsidian.setIcon)(iconSpan, suggestion.icon);
    const textSpan = wrapper.createSpan({ cls: "callout-suggestion-text" });
    textSpan.setText(suggestion.type);
    const color = suggestion.color;
    iconSpan.style.color = `rgb(${color})`;
    textSpan.style.color = `rgb(${color})`;
  }
  selectSuggestion(suggestion, evt) {
    const { editor, start, end } = this.context;
    if (editor) {
      editor.replaceRange(suggestion.type, start, end);
      const newPos = { line: start.line, ch: start.ch + suggestion.type.length };
      editor.setCursor(newPos);
    }
  }
};
var CalloutAutocompletePlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("Loading Callout Autocomplete Plugin");
      this.suggester = new CalloutSuggest(this);
      this.registerEditorSuggest(this.suggester);
      const style = document.createElement("style");
      style.textContent = `
            .callout-suggestion-item {
                display: flex;
                align-items: center;
                padding: 0px 0px; /* \u041E\u0442\u0441\u0442\u0443\u043F\u044B \u0432\u043D\u0443\u0442\u0440\u0438 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430 (\u0441\u0432\u0435\u0440\u0445\u0443/\u0441\u043D\u0438\u0437\u0443 8px, \u0441\u043B\u0435\u0432\u0430/\u0441\u043F\u0440\u0430\u0432\u0430 12px) */
                border-radius: 4px; /* \u0417\u0430\u043A\u0440\u0443\u0433\u043B\u0435\u043D\u0438\u0435 \u0443\u0433\u043B\u043E\u0432 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430 */
                margin: 0px 0; /* \u0412\u043D\u0435\u0448\u043D\u0438\u0435 \u043E\u0442\u0441\u0442\u0443\u043F\u044B (\u0441\u0432\u0435\u0440\u0445\u0443/\u0441\u043D\u0438\u0437\u0443 2px, \u0441\u043B\u0435\u0432\u0430/\u0441\u043F\u0440\u0430\u0432\u0430 0) */
                transition: background-color 0.1s ease;
                background-color: transparent;
            }
            .callout-suggestion-item:hover,
            .callout-suggestion-item.is-selected {
                background-color: var(--background-modifier-hover);
            }
            .callout-suggestion-icon {
                margin-right: 5px; /* \u041E\u0442\u0441\u0442\u0443\u043F \u043C\u0435\u0436\u0434\u0443 \u0438\u043A\u043E\u043D\u043A\u043E\u0439 \u0438 \u0442\u0435\u043A\u0441\u0442\u043E\u043C */
                width: 16px; /* \u0428\u0438\u0440\u0438\u043D\u0430 \u0438\u043A\u043E\u043D\u043A\u0438 */
                height: 16px; /* \u0412\u044B\u0441\u043E\u0442\u0430 \u0438\u043A\u043E\u043D\u043A\u0438 */
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .callout-suggestion-icon svg {
                width: 20px; /* \u0420\u0430\u0437\u043C\u0435\u0440 SVG-\u0438\u043A\u043E\u043D\u043A\u0438 \u043F\u043E \u0448\u0438\u0440\u0438\u043D\u0435 */
                height: 20px; /* \u0420\u0430\u0437\u043C\u0435\u0440 SVG-\u0438\u043A\u043E\u043D\u043A\u0438 \u043F\u043E \u0432\u044B\u0441\u043E\u0442\u0435 */
            }
            .callout-suggestion-text {
                flex: 1;
                font-size: 14px; /* \u0420\u0430\u0437\u043C\u0435\u0440 \u0448\u0440\u0438\u0444\u0442\u0430 \u0442\u0435\u043A\u0441\u0442\u0430 */
                font-weight: 500;
            }
            .suggestion-container {
                padding: 0px; /* \u0412\u043D\u0443\u0442\u0440\u0435\u043D\u043D\u0438\u0439 \u043E\u0442\u0441\u0442\u0443\u043F \u043A\u043E\u043D\u0442\u0435\u0439\u043D\u0435\u0440\u0430 (\u0432\u043B\u0438\u044F\u0435\u0442 \u043D\u0430 \u0440\u0430\u0441\u0441\u0442\u043E\u044F\u043D\u0438\u0435 \u043E\u0442 \u043A\u0440\u0430\u044F \u0441\u043F\u0438\u0441\u043A\u0430 \u0434\u043E \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432) */
                background-color: var(--background-primary);
                border: 1px solid var(--background-modifier-border);
                border-radius: 4px; /* \u0417\u0430\u043A\u0440\u0443\u0433\u043B\u0435\u043D\u0438\u0435 \u0443\u0433\u043B\u043E\u0432 \u043A\u043E\u043D\u0442\u0435\u0439\u043D\u0435\u0440\u0430 */
                box-shadow: 0 2px 8px var(--background-modifier-box-shadow);
            }
        `;
      document.head.appendChild(style);
      this.app.workspace.onLayoutReady(() => {
        console.log("Layout ready, loading callout types...");
        this.suggester.loadCalloutItems();
        const calloutManager = this.app.plugins.plugins["callout-manager"];
        if (calloutManager) {
          this.registerEvent(
            this.app.metadataCache.on("changed", () => {
              console.log("Settings changed, reloading callout types...");
              this.suggester.loadCalloutItems();
            })
          );
        }
      });
    });
  }
  onunload() {
    console.log("Unloading Callout Autocomplete Plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,
